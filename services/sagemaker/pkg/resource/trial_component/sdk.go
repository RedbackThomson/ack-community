// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package trial_component

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.TrialComponent{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeTrialComponentWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.TrialComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.TrialComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.TrialComponentName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeTrialComponentInput, error) {
	res := &svcsdk.DescribeTrialComponentInput{}

	if r.ko.Spec.TrialComponentName != nil {
		res.SetTrialComponentName(*r.ko.Spec.TrialComponentName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListTrialComponentsInput, error) {
	res := &svcsdk.ListTrialComponentsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateTrialComponentWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.TrialComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.TrialComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateTrialComponentInput, error) {
	res := &svcsdk.CreateTrialComponentInput{}

	if r.ko.Spec.DisplayName != nil {
		res.SetDisplayName(*r.ko.Spec.DisplayName)
	}
	if r.ko.Spec.EndTime != nil {
		res.SetEndTime(r.ko.Spec.EndTime.Time)
	}
	if r.ko.Spec.InputArtifacts != nil {
		f2 := map[string]*svcsdk.TrialComponentArtifact{}
		for f2key, f2valiter := range r.ko.Spec.InputArtifacts {
			f2val := &svcsdk.TrialComponentArtifact{}
			if f2valiter.MediaType != nil {
				f2val.SetMediaType(*f2valiter.MediaType)
			}
			if f2valiter.Value != nil {
				f2val.SetValue(*f2valiter.Value)
			}
			f2[f2key] = f2val
		}
		res.SetInputArtifacts(f2)
	}
	if r.ko.Spec.OutputArtifacts != nil {
		f3 := map[string]*svcsdk.TrialComponentArtifact{}
		for f3key, f3valiter := range r.ko.Spec.OutputArtifacts {
			f3val := &svcsdk.TrialComponentArtifact{}
			if f3valiter.MediaType != nil {
				f3val.SetMediaType(*f3valiter.MediaType)
			}
			if f3valiter.Value != nil {
				f3val.SetValue(*f3valiter.Value)
			}
			f3[f3key] = f3val
		}
		res.SetOutputArtifacts(f3)
	}
	if r.ko.Spec.Parameters != nil {
		f4 := map[string]*svcsdk.TrialComponentParameterValue{}
		for f4key, f4valiter := range r.ko.Spec.Parameters {
			f4val := &svcsdk.TrialComponentParameterValue{}
			if f4valiter.NumberValue != nil {
				f4val.SetNumberValue(*f4valiter.NumberValue)
			}
			if f4valiter.StringValue != nil {
				f4val.SetStringValue(*f4valiter.StringValue)
			}
			f4[f4key] = f4val
		}
		res.SetParameters(f4)
	}
	if r.ko.Spec.StartTime != nil {
		res.SetStartTime(r.ko.Spec.StartTime.Time)
	}
	if r.ko.Spec.Status != nil {
		f6 := &svcsdk.TrialComponentStatus{}
		if r.ko.Spec.Status.Message != nil {
			f6.SetMessage(*r.ko.Spec.Status.Message)
		}
		if r.ko.Spec.Status.PrimaryStatus != nil {
			f6.SetPrimaryStatus(*r.ko.Spec.Status.PrimaryStatus)
		}
		res.SetStatus(f6)
	}
	if r.ko.Spec.Tags != nil {
		f7 := []*svcsdk.Tag{}
		for _, f7iter := range r.ko.Spec.Tags {
			f7elem := &svcsdk.Tag{}
			if f7iter.Key != nil {
				f7elem.SetKey(*f7iter.Key)
			}
			if f7iter.Value != nil {
				f7elem.SetValue(*f7iter.Value)
			}
			f7 = append(f7, f7elem)
		}
		res.SetTags(f7)
	}
	if r.ko.Spec.TrialComponentName != nil {
		res.SetTrialComponentName(*r.ko.Spec.TrialComponentName)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(desired)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.UpdateTrialComponentWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.TrialComponentArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.TrialComponentArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.UpdateTrialComponentInput, error) {
	res := &svcsdk.UpdateTrialComponentInput{}

	if r.ko.Spec.DisplayName != nil {
		res.SetDisplayName(*r.ko.Spec.DisplayName)
	}
	if r.ko.Spec.EndTime != nil {
		res.SetEndTime(r.ko.Spec.EndTime.Time)
	}
	if r.ko.Spec.InputArtifacts != nil {
		f2 := map[string]*svcsdk.TrialComponentArtifact{}
		for f2key, f2valiter := range r.ko.Spec.InputArtifacts {
			f2val := &svcsdk.TrialComponentArtifact{}
			if f2valiter.MediaType != nil {
				f2val.SetMediaType(*f2valiter.MediaType)
			}
			if f2valiter.Value != nil {
				f2val.SetValue(*f2valiter.Value)
			}
			f2[f2key] = f2val
		}
		res.SetInputArtifacts(f2)
	}
	if r.ko.Spec.OutputArtifacts != nil {
		f4 := map[string]*svcsdk.TrialComponentArtifact{}
		for f4key, f4valiter := range r.ko.Spec.OutputArtifacts {
			f4val := &svcsdk.TrialComponentArtifact{}
			if f4valiter.MediaType != nil {
				f4val.SetMediaType(*f4valiter.MediaType)
			}
			if f4valiter.Value != nil {
				f4val.SetValue(*f4valiter.Value)
			}
			f4[f4key] = f4val
		}
		res.SetOutputArtifacts(f4)
	}
	if r.ko.Spec.Parameters != nil {
		f6 := map[string]*svcsdk.TrialComponentParameterValue{}
		for f6key, f6valiter := range r.ko.Spec.Parameters {
			f6val := &svcsdk.TrialComponentParameterValue{}
			if f6valiter.NumberValue != nil {
				f6val.SetNumberValue(*f6valiter.NumberValue)
			}
			if f6valiter.StringValue != nil {
				f6val.SetStringValue(*f6valiter.StringValue)
			}
			f6[f6key] = f6val
		}
		res.SetParameters(f6)
	}
	if r.ko.Spec.StartTime != nil {
		res.SetStartTime(r.ko.Spec.StartTime.Time)
	}
	if r.ko.Spec.Status != nil {
		f9 := &svcsdk.TrialComponentStatus{}
		if r.ko.Spec.Status.Message != nil {
			f9.SetMessage(*r.ko.Spec.Status.Message)
		}
		if r.ko.Spec.Status.PrimaryStatus != nil {
			f9.SetPrimaryStatus(*r.ko.Spec.Status.PrimaryStatus)
		}
		res.SetStatus(f9)
	}
	if r.ko.Spec.TrialComponentName != nil {
		res.SetTrialComponentName(*r.ko.Spec.TrialComponentName)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteTrialComponentWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteTrialComponentInput, error) {
	res := &svcsdk.DeleteTrialComponentInput{}

	if r.ko.Spec.TrialComponentName != nil {
		res.SetTrialComponentName(*r.ko.Spec.TrialComponentName)
	}

	return res, nil
}
