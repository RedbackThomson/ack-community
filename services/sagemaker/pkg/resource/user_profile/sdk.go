// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package user_profile

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.UserProfile{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeUserProfileWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.DomainID == nil || r.ko.Spec.UserProfileName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeUserProfileInput, error) {
	res := &svcsdk.DescribeUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListUserProfilesInput, error) {
	res := &svcsdk.ListUserProfilesInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateUserProfileWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateUserProfileInput, error) {
	res := &svcsdk.CreateUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.SingleSignOnUserIdentifier != nil {
		res.SetSingleSignOnUserIdentifier(*r.ko.Spec.SingleSignOnUserIdentifier)
	}
	if r.ko.Spec.SingleSignOnUserValue != nil {
		res.SetSingleSignOnUserValue(*r.ko.Spec.SingleSignOnUserValue)
	}
	if r.ko.Spec.Tags != nil {
		f3 := []*svcsdk.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdk.Tag{}
			if f3iter.Key != nil {
				f3elem.SetKey(*f3iter.Key)
			}
			if f3iter.Value != nil {
				f3elem.SetValue(*f3iter.Value)
			}
			f3 = append(f3, f3elem)
		}
		res.SetTags(f3)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}
	if r.ko.Spec.UserSettings != nil {
		f5 := &svcsdk.UserSettings{}
		if r.ko.Spec.UserSettings.ExecutionRole != nil {
			f5.SetExecutionRole(*r.ko.Spec.UserSettings.ExecutionRole)
		}
		if r.ko.Spec.UserSettings.JupyterServerAppSettings != nil {
			f5f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f5f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f1f0.SetInstanceType(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f1f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f5f1.SetDefaultResourceSpec(f5f1f0)
			}
			f5.SetJupyterServerAppSettings(f5f1)
		}
		if r.ko.Spec.UserSettings.KernelGatewayAppSettings != nil {
			f5f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f5f2f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f2f0.SetInstanceType(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f2f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f5f2.SetDefaultResourceSpec(f5f2f0)
			}
			f5.SetKernelGatewayAppSettings(f5f2)
		}
		if r.ko.Spec.UserSettings.SecurityGroups != nil {
			f5f3 := []*string{}
			for _, f5f3iter := range r.ko.Spec.UserSettings.SecurityGroups {
				var f5f3elem string
				f5f3elem = *f5f3iter
				f5f3 = append(f5f3, &f5f3elem)
			}
			f5.SetSecurityGroups(f5f3)
		}
		if r.ko.Spec.UserSettings.SharingSettings != nil {
			f5f4 := &svcsdk.SharingSettings{}
			if r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f5f4.SetNotebookOutputOption(*r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID != nil {
				f5f4.SetS3KmsKeyId(*r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3OutputPath != nil {
				f5f4.SetS3OutputPath(*r.ko.Spec.UserSettings.SharingSettings.S3OutputPath)
			}
			f5.SetSharingSettings(f5f4)
		}
		if r.ko.Spec.UserSettings.TensorBoardAppSettings != nil {
			f5f5 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f5f5f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f5f5f0.SetInstanceType(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f5f5f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f5f5.SetDefaultResourceSpec(f5f5f0)
			}
			f5.SetTensorBoardAppSettings(f5f5)
		}
		res.SetUserSettings(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(desired)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.UpdateUserProfileWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserProfileArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserProfileArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.UpdateUserProfileInput, error) {
	res := &svcsdk.UpdateUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}
	if r.ko.Spec.UserSettings != nil {
		f2 := &svcsdk.UserSettings{}
		if r.ko.Spec.UserSettings.ExecutionRole != nil {
			f2.SetExecutionRole(*r.ko.Spec.UserSettings.ExecutionRole)
		}
		if r.ko.Spec.UserSettings.JupyterServerAppSettings != nil {
			f2f1 := &svcsdk.JupyterServerAppSettings{}
			if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f2f1f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f1f0.SetInstanceType(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f1f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f2f1.SetDefaultResourceSpec(f2f1f0)
			}
			f2.SetJupyterServerAppSettings(f2f1)
		}
		if r.ko.Spec.UserSettings.KernelGatewayAppSettings != nil {
			f2f2 := &svcsdk.KernelGatewayAppSettings{}
			if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f2f2f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f2f0.SetInstanceType(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f2f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f2f2.SetDefaultResourceSpec(f2f2f0)
			}
			f2.SetKernelGatewayAppSettings(f2f2)
		}
		if r.ko.Spec.UserSettings.SecurityGroups != nil {
			f2f3 := []*string{}
			for _, f2f3iter := range r.ko.Spec.UserSettings.SecurityGroups {
				var f2f3elem string
				f2f3elem = *f2f3iter
				f2f3 = append(f2f3, &f2f3elem)
			}
			f2.SetSecurityGroups(f2f3)
		}
		if r.ko.Spec.UserSettings.SharingSettings != nil {
			f2f4 := &svcsdk.SharingSettings{}
			if r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption != nil {
				f2f4.SetNotebookOutputOption(*r.ko.Spec.UserSettings.SharingSettings.NotebookOutputOption)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID != nil {
				f2f4.SetS3KmsKeyId(*r.ko.Spec.UserSettings.SharingSettings.S3KMSKeyID)
			}
			if r.ko.Spec.UserSettings.SharingSettings.S3OutputPath != nil {
				f2f4.SetS3OutputPath(*r.ko.Spec.UserSettings.SharingSettings.S3OutputPath)
			}
			f2.SetSharingSettings(f2f4)
		}
		if r.ko.Spec.UserSettings.TensorBoardAppSettings != nil {
			f2f5 := &svcsdk.TensorBoardAppSettings{}
			if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f2f5f0 := &svcsdk.ResourceSpec{}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f2f5f0.SetInstanceType(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f2f5f0.SetSageMakerImageArn(*r.ko.Spec.UserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f2f5.SetDefaultResourceSpec(f2f5f0)
			}
			f2.SetTensorBoardAppSettings(f2f5)
		}
		res.SetUserSettings(f2)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteUserProfileWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteUserProfileInput, error) {
	res := &svcsdk.DeleteUserProfileInput{}

	if r.ko.Spec.DomainID != nil {
		res.SetDomainId(*r.ko.Spec.DomainID)
	}
	if r.ko.Spec.UserProfileName != nil {
		res.SetUserProfileName(*r.ko.Spec.UserProfileName)
	}

	return res, nil
}
