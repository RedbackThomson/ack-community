// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package transform_job

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.TransformJob{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeTransformJobWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.TransformJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.TransformJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.TransformJobName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeTransformJobInput, error) {
	res := &svcsdk.DescribeTransformJobInput{}

	if r.ko.Spec.TransformJobName != nil {
		res.SetTransformJobName(*r.ko.Spec.TransformJobName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListTransformJobsInput, error) {
	res := &svcsdk.ListTransformJobsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateTransformJobWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.TransformJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.TransformJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateTransformJobInput, error) {
	res := &svcsdk.CreateTransformJobInput{}

	if r.ko.Spec.BatchStrategy != nil {
		res.SetBatchStrategy(*r.ko.Spec.BatchStrategy)
	}
	if r.ko.Spec.DataProcessing != nil {
		f1 := &svcsdk.DataProcessing{}
		if r.ko.Spec.DataProcessing.InputFilter != nil {
			f1.SetInputFilter(*r.ko.Spec.DataProcessing.InputFilter)
		}
		if r.ko.Spec.DataProcessing.JoinSource != nil {
			f1.SetJoinSource(*r.ko.Spec.DataProcessing.JoinSource)
		}
		if r.ko.Spec.DataProcessing.OutputFilter != nil {
			f1.SetOutputFilter(*r.ko.Spec.DataProcessing.OutputFilter)
		}
		res.SetDataProcessing(f1)
	}
	if r.ko.Spec.Environment != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range r.ko.Spec.Environment {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetEnvironment(f2)
	}
	if r.ko.Spec.ExperimentConfig != nil {
		f3 := &svcsdk.ExperimentConfig{}
		if r.ko.Spec.ExperimentConfig.ExperimentName != nil {
			f3.SetExperimentName(*r.ko.Spec.ExperimentConfig.ExperimentName)
		}
		if r.ko.Spec.ExperimentConfig.TrialComponentDisplayName != nil {
			f3.SetTrialComponentDisplayName(*r.ko.Spec.ExperimentConfig.TrialComponentDisplayName)
		}
		if r.ko.Spec.ExperimentConfig.TrialName != nil {
			f3.SetTrialName(*r.ko.Spec.ExperimentConfig.TrialName)
		}
		res.SetExperimentConfig(f3)
	}
	if r.ko.Spec.MaxConcurrentTransforms != nil {
		res.SetMaxConcurrentTransforms(*r.ko.Spec.MaxConcurrentTransforms)
	}
	if r.ko.Spec.MaxPayloadInMB != nil {
		res.SetMaxPayloadInMB(*r.ko.Spec.MaxPayloadInMB)
	}
	if r.ko.Spec.ModelClientConfig != nil {
		f6 := &svcsdk.ModelClientConfig{}
		if r.ko.Spec.ModelClientConfig.InvocationsMaxRetries != nil {
			f6.SetInvocationsMaxRetries(*r.ko.Spec.ModelClientConfig.InvocationsMaxRetries)
		}
		if r.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds != nil {
			f6.SetInvocationsTimeoutInSeconds(*r.ko.Spec.ModelClientConfig.InvocationsTimeoutInSeconds)
		}
		res.SetModelClientConfig(f6)
	}
	if r.ko.Spec.ModelName != nil {
		res.SetModelName(*r.ko.Spec.ModelName)
	}
	if r.ko.Spec.Tags != nil {
		f8 := []*svcsdk.Tag{}
		for _, f8iter := range r.ko.Spec.Tags {
			f8elem := &svcsdk.Tag{}
			if f8iter.Key != nil {
				f8elem.SetKey(*f8iter.Key)
			}
			if f8iter.Value != nil {
				f8elem.SetValue(*f8iter.Value)
			}
			f8 = append(f8, f8elem)
		}
		res.SetTags(f8)
	}
	if r.ko.Spec.TransformInput != nil {
		f9 := &svcsdk.TransformInput{}
		if r.ko.Spec.TransformInput.CompressionType != nil {
			f9.SetCompressionType(*r.ko.Spec.TransformInput.CompressionType)
		}
		if r.ko.Spec.TransformInput.ContentType != nil {
			f9.SetContentType(*r.ko.Spec.TransformInput.ContentType)
		}
		if r.ko.Spec.TransformInput.DataSource != nil {
			f9f2 := &svcsdk.TransformDataSource{}
			if r.ko.Spec.TransformInput.DataSource.S3DataSource != nil {
				f9f2f0 := &svcsdk.TransformS3DataSource{}
				if r.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType != nil {
					f9f2f0.SetS3DataType(*r.ko.Spec.TransformInput.DataSource.S3DataSource.S3DataType)
				}
				if r.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI != nil {
					f9f2f0.SetS3Uri(*r.ko.Spec.TransformInput.DataSource.S3DataSource.S3URI)
				}
				f9f2.SetS3DataSource(f9f2f0)
			}
			f9.SetDataSource(f9f2)
		}
		if r.ko.Spec.TransformInput.SplitType != nil {
			f9.SetSplitType(*r.ko.Spec.TransformInput.SplitType)
		}
		res.SetTransformInput(f9)
	}
	if r.ko.Spec.TransformJobName != nil {
		res.SetTransformJobName(*r.ko.Spec.TransformJobName)
	}
	if r.ko.Spec.TransformOutput != nil {
		f11 := &svcsdk.TransformOutput{}
		if r.ko.Spec.TransformOutput.Accept != nil {
			f11.SetAccept(*r.ko.Spec.TransformOutput.Accept)
		}
		if r.ko.Spec.TransformOutput.AssembleWith != nil {
			f11.SetAssembleWith(*r.ko.Spec.TransformOutput.AssembleWith)
		}
		if r.ko.Spec.TransformOutput.KMSKeyID != nil {
			f11.SetKmsKeyId(*r.ko.Spec.TransformOutput.KMSKeyID)
		}
		if r.ko.Spec.TransformOutput.S3OutputPath != nil {
			f11.SetS3OutputPath(*r.ko.Spec.TransformOutput.S3OutputPath)
		}
		res.SetTransformOutput(f11)
	}
	if r.ko.Spec.TransformResources != nil {
		f12 := &svcsdk.TransformResources{}
		if r.ko.Spec.TransformResources.InstanceCount != nil {
			f12.SetInstanceCount(*r.ko.Spec.TransformResources.InstanceCount)
		}
		if r.ko.Spec.TransformResources.InstanceType != nil {
			f12.SetInstanceType(*r.ko.Spec.TransformResources.InstanceType)
		}
		if r.ko.Spec.TransformResources.VolumeKMSKeyID != nil {
			f12.SetVolumeKmsKeyId(*r.ko.Spec.TransformResources.VolumeKMSKeyID)
		}
		res.SetTransformResources(f12)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}
