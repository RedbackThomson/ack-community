// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package monitoring_schedule

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.MonitoringSchedule{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeMonitoringScheduleWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.MonitoringScheduleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.MonitoringScheduleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.MonitoringScheduleName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeMonitoringScheduleInput, error) {
	res := &svcsdk.DescribeMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListMonitoringSchedulesInput, error) {
	res := &svcsdk.ListMonitoringSchedulesInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateMonitoringScheduleWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.MonitoringScheduleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.MonitoringScheduleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateMonitoringScheduleInput, error) {
	res := &svcsdk.CreateMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleConfig != nil {
		f0 := &svcsdk.MonitoringScheduleConfig{}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition != nil {
			f0f0 := &svcsdk.MonitoringJobDefinition{}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig != nil {
				f0f0f0 := &svcsdk.MonitoringBaselineConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource != nil {
					f0f0f0f0 := &svcsdk.MonitoringConstraintsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI != nil {
						f0f0f0f0.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI)
					}
					f0f0f0.SetConstraintsResource(f0f0f0f0)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource != nil {
					f0f0f0f1 := &svcsdk.MonitoringStatisticsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI != nil {
						f0f0f0f1.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI)
					}
					f0f0f0.SetStatisticsResource(f0f0f0f1)
				}
				f0f0.SetBaselineConfig(f0f0f0)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment != nil {
				f0f0f1 := map[string]*string{}
				for f0f0f1key, f0f0f1valiter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment {
					var f0f0f1val string
					f0f0f1val = *f0f0f1valiter
					f0f0f1[f0f0f1key] = &f0f0f1val
				}
				f0f0.SetEnvironment(f0f0f1)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification != nil {
				f0f0f2 := &svcsdk.MonitoringAppSpecification{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments != nil {
					f0f0f2f0 := []*string{}
					for _, f0f0f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments {
						var f0f0f2f0elem string
						f0f0f2f0elem = *f0f0f2f0iter
						f0f0f2f0 = append(f0f0f2f0, &f0f0f2f0elem)
					}
					f0f0f2.SetContainerArguments(f0f0f2f0)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint != nil {
					f0f0f2f1 := []*string{}
					for _, f0f0f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint {
						var f0f0f2f1elem string
						f0f0f2f1elem = *f0f0f2f1iter
						f0f0f2f1 = append(f0f0f2f1, &f0f0f2f1elem)
					}
					f0f0f2.SetContainerEntrypoint(f0f0f2f1)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI != nil {
					f0f0f2.SetImageUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI != nil {
					f0f0f2.SetPostAnalyticsProcessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI != nil {
					f0f0f2.SetRecordPreprocessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI)
				}
				f0f0.SetMonitoringAppSpecification(f0f0f2)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs != nil {
				f0f0f3 := []*svcsdk.MonitoringInput{}
				for _, f0f0f3iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs {
					f0f0f3elem := &svcsdk.MonitoringInput{}
					if f0f0f3iter.EndpointInput != nil {
						f0f0f3elemf0 := &svcsdk.EndpointInput{}
						if f0f0f3iter.EndpointInput.EndpointName != nil {
							f0f0f3elemf0.SetEndpointName(*f0f0f3iter.EndpointInput.EndpointName)
						}
						if f0f0f3iter.EndpointInput.LocalPath != nil {
							f0f0f3elemf0.SetLocalPath(*f0f0f3iter.EndpointInput.LocalPath)
						}
						if f0f0f3iter.EndpointInput.S3DataDistributionType != nil {
							f0f0f3elemf0.SetS3DataDistributionType(*f0f0f3iter.EndpointInput.S3DataDistributionType)
						}
						if f0f0f3iter.EndpointInput.S3InputMode != nil {
							f0f0f3elemf0.SetS3InputMode(*f0f0f3iter.EndpointInput.S3InputMode)
						}
						f0f0f3elem.SetEndpointInput(f0f0f3elemf0)
					}
					f0f0f3 = append(f0f0f3, f0f0f3elem)
				}
				f0f0.SetMonitoringInputs(f0f0f3)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig != nil {
				f0f0f4 := &svcsdk.MonitoringOutputConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID != nil {
					f0f0f4.SetKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs != nil {
					f0f0f4f1 := []*svcsdk.MonitoringOutput{}
					for _, f0f0f4f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs {
						f0f0f4f1elem := &svcsdk.MonitoringOutput{}
						if f0f0f4f1iter.S3Output != nil {
							f0f0f4f1elemf0 := &svcsdk.MonitoringS3Output{}
							if f0f0f4f1iter.S3Output.LocalPath != nil {
								f0f0f4f1elemf0.SetLocalPath(*f0f0f4f1iter.S3Output.LocalPath)
							}
							if f0f0f4f1iter.S3Output.S3UploadMode != nil {
								f0f0f4f1elemf0.SetS3UploadMode(*f0f0f4f1iter.S3Output.S3UploadMode)
							}
							if f0f0f4f1iter.S3Output.S3URI != nil {
								f0f0f4f1elemf0.SetS3Uri(*f0f0f4f1iter.S3Output.S3URI)
							}
							f0f0f4f1elem.SetS3Output(f0f0f4f1elemf0)
						}
						f0f0f4f1 = append(f0f0f4f1, f0f0f4f1elem)
					}
					f0f0f4.SetMonitoringOutputs(f0f0f4f1)
				}
				f0f0.SetMonitoringOutputConfig(f0f0f4)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources != nil {
				f0f0f5 := &svcsdk.MonitoringResources{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig != nil {
					f0f0f5f0 := &svcsdk.MonitoringClusterConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount != nil {
						f0f0f5f0.SetInstanceCount(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType != nil {
						f0f0f5f0.SetInstanceType(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID != nil {
						f0f0f5f0.SetVolumeKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB != nil {
						f0f0f5f0.SetVolumeSizeInGB(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB)
					}
					f0f0f5.SetClusterConfig(f0f0f5f0)
				}
				f0f0.SetMonitoringResources(f0f0f5)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig != nil {
				f0f0f6 := &svcsdk.NetworkConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption != nil {
					f0f0f6.SetEnableInterContainerTrafficEncryption(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation != nil {
					f0f0f6.SetEnableNetworkIsolation(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig != nil {
					f0f0f6f2 := &svcsdk.VpcConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs != nil {
						f0f0f6f2f0 := []*string{}
						for _, f0f0f6f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs {
							var f0f0f6f2f0elem string
							f0f0f6f2f0elem = *f0f0f6f2f0iter
							f0f0f6f2f0 = append(f0f0f6f2f0, &f0f0f6f2f0elem)
						}
						f0f0f6f2.SetSecurityGroupIds(f0f0f6f2f0)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets != nil {
						f0f0f6f2f1 := []*string{}
						for _, f0f0f6f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets {
							var f0f0f6f2f1elem string
							f0f0f6f2f1elem = *f0f0f6f2f1iter
							f0f0f6f2f1 = append(f0f0f6f2f1, &f0f0f6f2f1elem)
						}
						f0f0f6f2.SetSubnets(f0f0f6f2f1)
					}
					f0f0f6.SetVpcConfig(f0f0f6f2)
				}
				f0f0.SetNetworkConfig(f0f0f6)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN != nil {
				f0f0.SetRoleArn(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition != nil {
				f0f0f8 := &svcsdk.MonitoringStoppingCondition{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
					f0f0f8.SetMaxRuntimeInSeconds(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
				}
				f0f0.SetStoppingCondition(f0f0f8)
			}
			f0.SetMonitoringJobDefinition(f0f0)
		}
		if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig != nil {
			f0f1 := &svcsdk.ScheduleConfig{}
			if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression != nil {
				f0f1.SetScheduleExpression(*r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression)
			}
			f0.SetScheduleConfig(f0f1)
		}
		res.SetMonitoringScheduleConfig(f0)
	}
	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}
	if r.ko.Spec.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range r.ko.Spec.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(desired)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.UpdateMonitoringScheduleWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.MonitoringScheduleArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.MonitoringScheduleArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.UpdateMonitoringScheduleInput, error) {
	res := &svcsdk.UpdateMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleConfig != nil {
		f0 := &svcsdk.MonitoringScheduleConfig{}
		if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition != nil {
			f0f0 := &svcsdk.MonitoringJobDefinition{}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig != nil {
				f0f0f0 := &svcsdk.MonitoringBaselineConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource != nil {
					f0f0f0f0 := &svcsdk.MonitoringConstraintsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI != nil {
						f0f0f0f0.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI)
					}
					f0f0f0.SetConstraintsResource(f0f0f0f0)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource != nil {
					f0f0f0f1 := &svcsdk.MonitoringStatisticsResource{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI != nil {
						f0f0f0f1.SetS3Uri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI)
					}
					f0f0f0.SetStatisticsResource(f0f0f0f1)
				}
				f0f0.SetBaselineConfig(f0f0f0)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment != nil {
				f0f0f1 := map[string]*string{}
				for f0f0f1key, f0f0f1valiter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.Environment {
					var f0f0f1val string
					f0f0f1val = *f0f0f1valiter
					f0f0f1[f0f0f1key] = &f0f0f1val
				}
				f0f0.SetEnvironment(f0f0f1)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification != nil {
				f0f0f2 := &svcsdk.MonitoringAppSpecification{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments != nil {
					f0f0f2f0 := []*string{}
					for _, f0f0f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments {
						var f0f0f2f0elem string
						f0f0f2f0elem = *f0f0f2f0iter
						f0f0f2f0 = append(f0f0f2f0, &f0f0f2f0elem)
					}
					f0f0f2.SetContainerArguments(f0f0f2f0)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint != nil {
					f0f0f2f1 := []*string{}
					for _, f0f0f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint {
						var f0f0f2f1elem string
						f0f0f2f1elem = *f0f0f2f1iter
						f0f0f2f1 = append(f0f0f2f1, &f0f0f2f1elem)
					}
					f0f0f2.SetContainerEntrypoint(f0f0f2f1)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI != nil {
					f0f0f2.SetImageUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI != nil {
					f0f0f2.SetPostAnalyticsProcessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI != nil {
					f0f0f2.SetRecordPreprocessorSourceUri(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI)
				}
				f0f0.SetMonitoringAppSpecification(f0f0f2)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs != nil {
				f0f0f3 := []*svcsdk.MonitoringInput{}
				for _, f0f0f3iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs {
					f0f0f3elem := &svcsdk.MonitoringInput{}
					if f0f0f3iter.EndpointInput != nil {
						f0f0f3elemf0 := &svcsdk.EndpointInput{}
						if f0f0f3iter.EndpointInput.EndpointName != nil {
							f0f0f3elemf0.SetEndpointName(*f0f0f3iter.EndpointInput.EndpointName)
						}
						if f0f0f3iter.EndpointInput.LocalPath != nil {
							f0f0f3elemf0.SetLocalPath(*f0f0f3iter.EndpointInput.LocalPath)
						}
						if f0f0f3iter.EndpointInput.S3DataDistributionType != nil {
							f0f0f3elemf0.SetS3DataDistributionType(*f0f0f3iter.EndpointInput.S3DataDistributionType)
						}
						if f0f0f3iter.EndpointInput.S3InputMode != nil {
							f0f0f3elemf0.SetS3InputMode(*f0f0f3iter.EndpointInput.S3InputMode)
						}
						f0f0f3elem.SetEndpointInput(f0f0f3elemf0)
					}
					f0f0f3 = append(f0f0f3, f0f0f3elem)
				}
				f0f0.SetMonitoringInputs(f0f0f3)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig != nil {
				f0f0f4 := &svcsdk.MonitoringOutputConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID != nil {
					f0f0f4.SetKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs != nil {
					f0f0f4f1 := []*svcsdk.MonitoringOutput{}
					for _, f0f0f4f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs {
						f0f0f4f1elem := &svcsdk.MonitoringOutput{}
						if f0f0f4f1iter.S3Output != nil {
							f0f0f4f1elemf0 := &svcsdk.MonitoringS3Output{}
							if f0f0f4f1iter.S3Output.LocalPath != nil {
								f0f0f4f1elemf0.SetLocalPath(*f0f0f4f1iter.S3Output.LocalPath)
							}
							if f0f0f4f1iter.S3Output.S3UploadMode != nil {
								f0f0f4f1elemf0.SetS3UploadMode(*f0f0f4f1iter.S3Output.S3UploadMode)
							}
							if f0f0f4f1iter.S3Output.S3URI != nil {
								f0f0f4f1elemf0.SetS3Uri(*f0f0f4f1iter.S3Output.S3URI)
							}
							f0f0f4f1elem.SetS3Output(f0f0f4f1elemf0)
						}
						f0f0f4f1 = append(f0f0f4f1, f0f0f4f1elem)
					}
					f0f0f4.SetMonitoringOutputs(f0f0f4f1)
				}
				f0f0.SetMonitoringOutputConfig(f0f0f4)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources != nil {
				f0f0f5 := &svcsdk.MonitoringResources{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig != nil {
					f0f0f5f0 := &svcsdk.MonitoringClusterConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount != nil {
						f0f0f5f0.SetInstanceCount(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType != nil {
						f0f0f5f0.SetInstanceType(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID != nil {
						f0f0f5f0.SetVolumeKmsKeyId(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB != nil {
						f0f0f5f0.SetVolumeSizeInGB(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB)
					}
					f0f0f5.SetClusterConfig(f0f0f5f0)
				}
				f0f0.SetMonitoringResources(f0f0f5)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig != nil {
				f0f0f6 := &svcsdk.NetworkConfig{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption != nil {
					f0f0f6.SetEnableInterContainerTrafficEncryption(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation != nil {
					f0f0f6.SetEnableNetworkIsolation(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation)
				}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig != nil {
					f0f0f6f2 := &svcsdk.VpcConfig{}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs != nil {
						f0f0f6f2f0 := []*string{}
						for _, f0f0f6f2f0iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs {
							var f0f0f6f2f0elem string
							f0f0f6f2f0elem = *f0f0f6f2f0iter
							f0f0f6f2f0 = append(f0f0f6f2f0, &f0f0f6f2f0elem)
						}
						f0f0f6f2.SetSecurityGroupIds(f0f0f6f2f0)
					}
					if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets != nil {
						f0f0f6f2f1 := []*string{}
						for _, f0f0f6f2f1iter := range r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets {
							var f0f0f6f2f1elem string
							f0f0f6f2f1elem = *f0f0f6f2f1iter
							f0f0f6f2f1 = append(f0f0f6f2f1, &f0f0f6f2f1elem)
						}
						f0f0f6f2.SetSubnets(f0f0f6f2f1)
					}
					f0f0f6.SetVpcConfig(f0f0f6f2)
				}
				f0f0.SetNetworkConfig(f0f0f6)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN != nil {
				f0f0.SetRoleArn(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN)
			}
			if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition != nil {
				f0f0f8 := &svcsdk.MonitoringStoppingCondition{}
				if r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
					f0f0f8.SetMaxRuntimeInSeconds(*r.ko.Spec.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
				}
				f0f0.SetStoppingCondition(f0f0f8)
			}
			f0.SetMonitoringJobDefinition(f0f0)
		}
		if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig != nil {
			f0f1 := &svcsdk.ScheduleConfig{}
			if r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression != nil {
				f0f1.SetScheduleExpression(*r.ko.Spec.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression)
			}
			f0.SetScheduleConfig(f0f1)
		}
		res.SetMonitoringScheduleConfig(f0)
	}
	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteMonitoringScheduleWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteMonitoringScheduleInput, error) {
	res := &svcsdk.DeleteMonitoringScheduleInput{}

	if r.ko.Spec.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*r.ko.Spec.MonitoringScheduleName)
	}

	return res, nil
}
