// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package workteam

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.Workteam{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeWorkteamWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Workteam.WorkteamArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Workteam.WorkteamArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.WorkteamName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeWorkteamInput, error) {
	res := &svcsdk.DescribeWorkteamInput{}

	if r.ko.Spec.WorkteamName != nil {
		res.SetWorkteamName(*r.ko.Spec.WorkteamName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListWorkteamsInput, error) {
	res := &svcsdk.ListWorkteamsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateWorkteamWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.WorkteamArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.WorkteamArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateWorkteamInput, error) {
	res := &svcsdk.CreateWorkteamInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.MemberDefinitions != nil {
		f1 := []*svcsdk.MemberDefinition{}
		for _, f1iter := range r.ko.Spec.MemberDefinitions {
			f1elem := &svcsdk.MemberDefinition{}
			if f1iter.CognitoMemberDefinition != nil {
				f1elemf0 := &svcsdk.CognitoMemberDefinition{}
				if f1iter.CognitoMemberDefinition.ClientID != nil {
					f1elemf0.SetClientId(*f1iter.CognitoMemberDefinition.ClientID)
				}
				if f1iter.CognitoMemberDefinition.UserGroup != nil {
					f1elemf0.SetUserGroup(*f1iter.CognitoMemberDefinition.UserGroup)
				}
				if f1iter.CognitoMemberDefinition.UserPool != nil {
					f1elemf0.SetUserPool(*f1iter.CognitoMemberDefinition.UserPool)
				}
				f1elem.SetCognitoMemberDefinition(f1elemf0)
			}
			if f1iter.OidcMemberDefinition != nil {
				f1elemf1 := &svcsdk.OidcMemberDefinition{}
				if f1iter.OidcMemberDefinition.Groups != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.OidcMemberDefinition.Groups {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetGroups(f1elemf1f0)
				}
				f1elem.SetOidcMemberDefinition(f1elemf1)
			}
			f1 = append(f1, f1elem)
		}
		res.SetMemberDefinitions(f1)
	}
	if r.ko.Spec.NotificationConfiguration != nil {
		f2 := &svcsdk.NotificationConfiguration{}
		if r.ko.Spec.NotificationConfiguration.NotificationTopicARN != nil {
			f2.SetNotificationTopicArn(*r.ko.Spec.NotificationConfiguration.NotificationTopicARN)
		}
		res.SetNotificationConfiguration(f2)
	}
	if r.ko.Spec.Tags != nil {
		f3 := []*svcsdk.Tag{}
		for _, f3iter := range r.ko.Spec.Tags {
			f3elem := &svcsdk.Tag{}
			if f3iter.Key != nil {
				f3elem.SetKey(*f3iter.Key)
			}
			if f3iter.Value != nil {
				f3elem.SetValue(*f3iter.Value)
			}
			f3 = append(f3, f3elem)
		}
		res.SetTags(f3)
	}
	if r.ko.Spec.WorkforceName != nil {
		res.SetWorkforceName(*r.ko.Spec.WorkforceName)
	}
	if r.ko.Spec.WorkteamName != nil {
		res.SetWorkteamName(*r.ko.Spec.WorkteamName)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(desired)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.UpdateWorkteamWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Workteam.WorkteamArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Workteam.WorkteamArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	r *resource,
) (*svcsdk.UpdateWorkteamInput, error) {
	res := &svcsdk.UpdateWorkteamInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.MemberDefinitions != nil {
		f1 := []*svcsdk.MemberDefinition{}
		for _, f1iter := range r.ko.Spec.MemberDefinitions {
			f1elem := &svcsdk.MemberDefinition{}
			if f1iter.CognitoMemberDefinition != nil {
				f1elemf0 := &svcsdk.CognitoMemberDefinition{}
				if f1iter.CognitoMemberDefinition.ClientID != nil {
					f1elemf0.SetClientId(*f1iter.CognitoMemberDefinition.ClientID)
				}
				if f1iter.CognitoMemberDefinition.UserGroup != nil {
					f1elemf0.SetUserGroup(*f1iter.CognitoMemberDefinition.UserGroup)
				}
				if f1iter.CognitoMemberDefinition.UserPool != nil {
					f1elemf0.SetUserPool(*f1iter.CognitoMemberDefinition.UserPool)
				}
				f1elem.SetCognitoMemberDefinition(f1elemf0)
			}
			if f1iter.OidcMemberDefinition != nil {
				f1elemf1 := &svcsdk.OidcMemberDefinition{}
				if f1iter.OidcMemberDefinition.Groups != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.OidcMemberDefinition.Groups {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetGroups(f1elemf1f0)
				}
				f1elem.SetOidcMemberDefinition(f1elemf1)
			}
			f1 = append(f1, f1elem)
		}
		res.SetMemberDefinitions(f1)
	}
	if r.ko.Spec.NotificationConfiguration != nil {
		f2 := &svcsdk.NotificationConfiguration{}
		if r.ko.Spec.NotificationConfiguration.NotificationTopicARN != nil {
			f2.SetNotificationTopicArn(*r.ko.Spec.NotificationConfiguration.NotificationTopicARN)
		}
		res.SetNotificationConfiguration(f2)
	}
	if r.ko.Spec.WorkteamName != nil {
		res.SetWorkteamName(*r.ko.Spec.WorkteamName)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteWorkteamWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteWorkteamInput, error) {
	res := &svcsdk.DeleteWorkteamInput{}

	if r.ko.Spec.WorkteamName != nil {
		res.SetWorkteamName(*r.ko.Spec.WorkteamName)
	}

	return res, nil
}
