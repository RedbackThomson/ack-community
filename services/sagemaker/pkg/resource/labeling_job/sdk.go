// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package labeling_job

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.LabelingJob{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeLabelingJobWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.LabelingJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.LabelingJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.LabelingJobName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeLabelingJobInput, error) {
	res := &svcsdk.DescribeLabelingJobInput{}

	if r.ko.Spec.LabelingJobName != nil {
		res.SetLabelingJobName(*r.ko.Spec.LabelingJobName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListLabelingJobsInput, error) {
	res := &svcsdk.ListLabelingJobsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateLabelingJobWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.LabelingJobArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.LabelingJobArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateLabelingJobInput, error) {
	res := &svcsdk.CreateLabelingJobInput{}

	if r.ko.Spec.HumanTaskConfig != nil {
		f0 := &svcsdk.HumanTaskConfig{}
		if r.ko.Spec.HumanTaskConfig.AnnotationConsolidationConfig != nil {
			f0f0 := &svcsdk.AnnotationConsolidationConfig{}
			if r.ko.Spec.HumanTaskConfig.AnnotationConsolidationConfig.AnnotationConsolidationLambdaARN != nil {
				f0f0.SetAnnotationConsolidationLambdaArn(*r.ko.Spec.HumanTaskConfig.AnnotationConsolidationConfig.AnnotationConsolidationLambdaARN)
			}
			f0.SetAnnotationConsolidationConfig(f0f0)
		}
		if r.ko.Spec.HumanTaskConfig.MaxConcurrentTaskCount != nil {
			f0.SetMaxConcurrentTaskCount(*r.ko.Spec.HumanTaskConfig.MaxConcurrentTaskCount)
		}
		if r.ko.Spec.HumanTaskConfig.NumberOfHumanWorkersPerDataObject != nil {
			f0.SetNumberOfHumanWorkersPerDataObject(*r.ko.Spec.HumanTaskConfig.NumberOfHumanWorkersPerDataObject)
		}
		if r.ko.Spec.HumanTaskConfig.PreHumanTaskLambdaARN != nil {
			f0.SetPreHumanTaskLambdaArn(*r.ko.Spec.HumanTaskConfig.PreHumanTaskLambdaARN)
		}
		if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice != nil {
			f0f4 := &svcsdk.PublicWorkforceTaskPrice{}
			if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd != nil {
				f0f4f0 := &svcsdk.USD{}
				if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Cents != nil {
					f0f4f0.SetCents(*r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Cents)
				}
				if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Dollars != nil {
					f0f4f0.SetDollars(*r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.Dollars)
				}
				if r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.TenthFractionsOfACent != nil {
					f0f4f0.SetTenthFractionsOfACent(*r.ko.Spec.HumanTaskConfig.PublicWorkforceTaskPrice.AmountInUsd.TenthFractionsOfACent)
				}
				f0f4.SetAmountInUsd(f0f4f0)
			}
			f0.SetPublicWorkforceTaskPrice(f0f4)
		}
		if r.ko.Spec.HumanTaskConfig.TaskAvailabilityLifetimeInSeconds != nil {
			f0.SetTaskAvailabilityLifetimeInSeconds(*r.ko.Spec.HumanTaskConfig.TaskAvailabilityLifetimeInSeconds)
		}
		if r.ko.Spec.HumanTaskConfig.TaskDescription != nil {
			f0.SetTaskDescription(*r.ko.Spec.HumanTaskConfig.TaskDescription)
		}
		if r.ko.Spec.HumanTaskConfig.TaskKeywords != nil {
			f0f7 := []*string{}
			for _, f0f7iter := range r.ko.Spec.HumanTaskConfig.TaskKeywords {
				var f0f7elem string
				f0f7elem = *f0f7iter
				f0f7 = append(f0f7, &f0f7elem)
			}
			f0.SetTaskKeywords(f0f7)
		}
		if r.ko.Spec.HumanTaskConfig.TaskTimeLimitInSeconds != nil {
			f0.SetTaskTimeLimitInSeconds(*r.ko.Spec.HumanTaskConfig.TaskTimeLimitInSeconds)
		}
		if r.ko.Spec.HumanTaskConfig.TaskTitle != nil {
			f0.SetTaskTitle(*r.ko.Spec.HumanTaskConfig.TaskTitle)
		}
		if r.ko.Spec.HumanTaskConfig.UiConfig != nil {
			f0f10 := &svcsdk.UiConfig{}
			if r.ko.Spec.HumanTaskConfig.UiConfig.HumanTaskUiARN != nil {
				f0f10.SetHumanTaskUiArn(*r.ko.Spec.HumanTaskConfig.UiConfig.HumanTaskUiARN)
			}
			if r.ko.Spec.HumanTaskConfig.UiConfig.UiTemplateS3URI != nil {
				f0f10.SetUiTemplateS3Uri(*r.ko.Spec.HumanTaskConfig.UiConfig.UiTemplateS3URI)
			}
			f0.SetUiConfig(f0f10)
		}
		if r.ko.Spec.HumanTaskConfig.WorkteamARN != nil {
			f0.SetWorkteamArn(*r.ko.Spec.HumanTaskConfig.WorkteamARN)
		}
		res.SetHumanTaskConfig(f0)
	}
	if r.ko.Spec.InputConfig != nil {
		f1 := &svcsdk.LabelingJobInputConfig{}
		if r.ko.Spec.InputConfig.DataAttributes != nil {
			f1f0 := &svcsdk.LabelingJobDataAttributes{}
			if r.ko.Spec.InputConfig.DataAttributes.ContentClassifiers != nil {
				f1f0f0 := []*string{}
				for _, f1f0f0iter := range r.ko.Spec.InputConfig.DataAttributes.ContentClassifiers {
					var f1f0f0elem string
					f1f0f0elem = *f1f0f0iter
					f1f0f0 = append(f1f0f0, &f1f0f0elem)
				}
				f1f0.SetContentClassifiers(f1f0f0)
			}
			f1.SetDataAttributes(f1f0)
		}
		if r.ko.Spec.InputConfig.DataSource != nil {
			f1f1 := &svcsdk.LabelingJobDataSource{}
			if r.ko.Spec.InputConfig.DataSource.S3DataSource != nil {
				f1f1f0 := &svcsdk.LabelingJobS3DataSource{}
				if r.ko.Spec.InputConfig.DataSource.S3DataSource.ManifestS3URI != nil {
					f1f1f0.SetManifestS3Uri(*r.ko.Spec.InputConfig.DataSource.S3DataSource.ManifestS3URI)
				}
				f1f1.SetS3DataSource(f1f1f0)
			}
			if r.ko.Spec.InputConfig.DataSource.SnsDataSource != nil {
				f1f1f1 := &svcsdk.LabelingJobSnsDataSource{}
				if r.ko.Spec.InputConfig.DataSource.SnsDataSource.SnsTopicARN != nil {
					f1f1f1.SetSnsTopicArn(*r.ko.Spec.InputConfig.DataSource.SnsDataSource.SnsTopicARN)
				}
				f1f1.SetSnsDataSource(f1f1f1)
			}
			f1.SetDataSource(f1f1)
		}
		res.SetInputConfig(f1)
	}
	if r.ko.Spec.LabelAttributeName != nil {
		res.SetLabelAttributeName(*r.ko.Spec.LabelAttributeName)
	}
	if r.ko.Spec.LabelCategoryConfigS3URI != nil {
		res.SetLabelCategoryConfigS3Uri(*r.ko.Spec.LabelCategoryConfigS3URI)
	}
	if r.ko.Spec.LabelingJobAlgorithmsConfig != nil {
		f4 := &svcsdk.LabelingJobAlgorithmsConfig{}
		if r.ko.Spec.LabelingJobAlgorithmsConfig.InitialActiveLearningModelARN != nil {
			f4.SetInitialActiveLearningModelArn(*r.ko.Spec.LabelingJobAlgorithmsConfig.InitialActiveLearningModelARN)
		}
		if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobAlgorithmSpecificationARN != nil {
			f4.SetLabelingJobAlgorithmSpecificationArn(*r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobAlgorithmSpecificationARN)
		}
		if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig != nil {
			f4f2 := &svcsdk.LabelingJobResourceConfig{}
			if r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VolumeKMSKeyID != nil {
				f4f2.SetVolumeKmsKeyId(*r.ko.Spec.LabelingJobAlgorithmsConfig.LabelingJobResourceConfig.VolumeKMSKeyID)
			}
			f4.SetLabelingJobResourceConfig(f4f2)
		}
		res.SetLabelingJobAlgorithmsConfig(f4)
	}
	if r.ko.Spec.LabelingJobName != nil {
		res.SetLabelingJobName(*r.ko.Spec.LabelingJobName)
	}
	if r.ko.Spec.OutputConfig != nil {
		f6 := &svcsdk.LabelingJobOutputConfig{}
		if r.ko.Spec.OutputConfig.KMSKeyID != nil {
			f6.SetKmsKeyId(*r.ko.Spec.OutputConfig.KMSKeyID)
		}
		if r.ko.Spec.OutputConfig.S3OutputPath != nil {
			f6.SetS3OutputPath(*r.ko.Spec.OutputConfig.S3OutputPath)
		}
		if r.ko.Spec.OutputConfig.SnsTopicARN != nil {
			f6.SetSnsTopicArn(*r.ko.Spec.OutputConfig.SnsTopicARN)
		}
		res.SetOutputConfig(f6)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.StoppingConditions != nil {
		f8 := &svcsdk.LabelingJobStoppingConditions{}
		if r.ko.Spec.StoppingConditions.MaxHumanLabeledObjectCount != nil {
			f8.SetMaxHumanLabeledObjectCount(*r.ko.Spec.StoppingConditions.MaxHumanLabeledObjectCount)
		}
		if r.ko.Spec.StoppingConditions.MaxPercentageOfInputDatasetLabeled != nil {
			f8.SetMaxPercentageOfInputDatasetLabeled(*r.ko.Spec.StoppingConditions.MaxPercentageOfInputDatasetLabeled)
		}
		res.SetStoppingConditions(f8)
	}
	if r.ko.Spec.Tags != nil {
		f9 := []*svcsdk.Tag{}
		for _, f9iter := range r.ko.Spec.Tags {
			f9elem := &svcsdk.Tag{}
			if f9iter.Key != nil {
				f9elem.SetKey(*f9iter.Key)
			}
			if f9iter.Value != nil {
				f9elem.SetValue(*f9iter.Value)
			}
			f9 = append(f9, f9elem)
		}
		res.SetTags(f9)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}
