// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package model_package

import (
	"context"

	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	ackcompare "github.com/aws/aws-controllers-k8s/pkg/compare"
	ackerr "github.com/aws/aws-controllers-k8s/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws/aws-controllers-k8s/services/sagemaker/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = &svcsdk.SageMaker{}
	_ = &svcapitypes.ModelPackage{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeModelPackageWithContext(ctx, input)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required by not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.ModelPackageName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeModelPackageInput, error) {
	res := &svcsdk.DescribeModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}

	return res, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListModelPackagesInput, error) {
	res := &svcsdk.ListModelPackagesInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateModelPackageWithContext(ctx, input)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ModelPackageArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ModelPackageArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	ko.Status.Conditions = []*ackv1alpha1.Condition{}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	r *resource,
) (*svcsdk.CreateModelPackageInput, error) {
	res := &svcsdk.CreateModelPackageInput{}

	if r.ko.Spec.CertifyForMarketplace != nil {
		res.SetCertifyForMarketplace(*r.ko.Spec.CertifyForMarketplace)
	}
	if r.ko.Spec.InferenceSpecification != nil {
		f1 := &svcsdk.InferenceSpecification{}
		if r.ko.Spec.InferenceSpecification.Containers != nil {
			f1f0 := []*svcsdk.ModelPackageContainerDefinition{}
			for _, f1f0iter := range r.ko.Spec.InferenceSpecification.Containers {
				f1f0elem := &svcsdk.ModelPackageContainerDefinition{}
				if f1f0iter.ContainerHostname != nil {
					f1f0elem.SetContainerHostname(*f1f0iter.ContainerHostname)
				}
				if f1f0iter.Image != nil {
					f1f0elem.SetImage(*f1f0iter.Image)
				}
				if f1f0iter.ImageDigest != nil {
					f1f0elem.SetImageDigest(*f1f0iter.ImageDigest)
				}
				if f1f0iter.ModelDataURL != nil {
					f1f0elem.SetModelDataUrl(*f1f0iter.ModelDataURL)
				}
				if f1f0iter.ProductID != nil {
					f1f0elem.SetProductId(*f1f0iter.ProductID)
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.SetContainers(f1f0)
		}
		if r.ko.Spec.InferenceSpecification.SupportedContentTypes != nil {
			f1f1 := []*string{}
			for _, f1f1iter := range r.ko.Spec.InferenceSpecification.SupportedContentTypes {
				var f1f1elem string
				f1f1elem = *f1f1iter
				f1f1 = append(f1f1, &f1f1elem)
			}
			f1.SetSupportedContentTypes(f1f1)
		}
		if r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f1f2 := []*string{}
			for _, f1f2iter := range r.ko.Spec.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f1f2elem string
				f1f2elem = *f1f2iter
				f1f2 = append(f1f2, &f1f2elem)
			}
			f1.SetSupportedRealtimeInferenceInstanceTypes(f1f2)
		}
		if r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range r.ko.Spec.InferenceSpecification.SupportedResponseMIMETypes {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.SetSupportedResponseMIMETypes(f1f3)
		}
		if r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f1f4 := []*string{}
			for _, f1f4iter := range r.ko.Spec.InferenceSpecification.SupportedTransformInstanceTypes {
				var f1f4elem string
				f1f4elem = *f1f4iter
				f1f4 = append(f1f4, &f1f4elem)
			}
			f1.SetSupportedTransformInstanceTypes(f1f4)
		}
		res.SetInferenceSpecification(f1)
	}
	if r.ko.Spec.ModelPackageDescription != nil {
		res.SetModelPackageDescription(*r.ko.Spec.ModelPackageDescription)
	}
	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}
	if r.ko.Spec.SourceAlgorithmSpecification != nil {
		f4 := &svcsdk.SourceAlgorithmSpecification{}
		if r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f4f0 := []*svcsdk.SourceAlgorithm{}
			for _, f4f0iter := range r.ko.Spec.SourceAlgorithmSpecification.SourceAlgorithms {
				f4f0elem := &svcsdk.SourceAlgorithm{}
				if f4f0iter.AlgorithmName != nil {
					f4f0elem.SetAlgorithmName(*f4f0iter.AlgorithmName)
				}
				if f4f0iter.ModelDataURL != nil {
					f4f0elem.SetModelDataUrl(*f4f0iter.ModelDataURL)
				}
				f4f0 = append(f4f0, f4f0elem)
			}
			f4.SetSourceAlgorithms(f4f0)
		}
		res.SetSourceAlgorithmSpecification(f4)
	}
	if r.ko.Spec.ValidationSpecification != nil {
		f5 := &svcsdk.ModelPackageValidationSpecification{}
		if r.ko.Spec.ValidationSpecification.ValidationProfiles != nil {
			f5f0 := []*svcsdk.ModelPackageValidationProfile{}
			for _, f5f0iter := range r.ko.Spec.ValidationSpecification.ValidationProfiles {
				f5f0elem := &svcsdk.ModelPackageValidationProfile{}
				if f5f0iter.ProfileName != nil {
					f5f0elem.SetProfileName(*f5f0iter.ProfileName)
				}
				if f5f0iter.TransformJobDefinition != nil {
					f5f0elemf1 := &svcsdk.TransformJobDefinition{}
					if f5f0iter.TransformJobDefinition.BatchStrategy != nil {
						f5f0elemf1.SetBatchStrategy(*f5f0iter.TransformJobDefinition.BatchStrategy)
					}
					if f5f0iter.TransformJobDefinition.Environment != nil {
						f5f0elemf1f1 := map[string]*string{}
						for f5f0elemf1f1key, f5f0elemf1f1valiter := range f5f0iter.TransformJobDefinition.Environment {
							var f5f0elemf1f1val string
							f5f0elemf1f1val = *f5f0elemf1f1valiter
							f5f0elemf1f1[f5f0elemf1f1key] = &f5f0elemf1f1val
						}
						f5f0elemf1.SetEnvironment(f5f0elemf1f1)
					}
					if f5f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f5f0elemf1.SetMaxConcurrentTransforms(*f5f0iter.TransformJobDefinition.MaxConcurrentTransforms)
					}
					if f5f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f5f0elemf1.SetMaxPayloadInMB(*f5f0iter.TransformJobDefinition.MaxPayloadInMB)
					}
					if f5f0iter.TransformJobDefinition.TransformInput != nil {
						f5f0elemf1f4 := &svcsdk.TransformInput{}
						if f5f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f5f0elemf1f4.SetCompressionType(*f5f0iter.TransformJobDefinition.TransformInput.CompressionType)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f5f0elemf1f4.SetContentType(*f5f0iter.TransformJobDefinition.TransformInput.ContentType)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f5f0elemf1f4f2 := &svcsdk.TransformDataSource{}
							if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f5f0elemf1f4f2f0 := &svcsdk.TransformS3DataSource{}
								if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f5f0elemf1f4f2f0.SetS3DataType(*f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType)
								}
								if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI != nil {
									f5f0elemf1f4f2f0.SetS3Uri(*f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI)
								}
								f5f0elemf1f4f2.SetS3DataSource(f5f0elemf1f4f2f0)
							}
							f5f0elemf1f4.SetDataSource(f5f0elemf1f4f2)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f5f0elemf1f4.SetSplitType(*f5f0iter.TransformJobDefinition.TransformInput.SplitType)
						}
						f5f0elemf1.SetTransformInput(f5f0elemf1f4)
					}
					if f5f0iter.TransformJobDefinition.TransformOutput != nil {
						f5f0elemf1f5 := &svcsdk.TransformOutput{}
						if f5f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f5f0elemf1f5.SetAccept(*f5f0iter.TransformJobDefinition.TransformOutput.Accept)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f5f0elemf1f5.SetAssembleWith(*f5f0iter.TransformJobDefinition.TransformOutput.AssembleWith)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.KMSKeyID != nil {
							f5f0elemf1f5.SetKmsKeyId(*f5f0iter.TransformJobDefinition.TransformOutput.KMSKeyID)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f5f0elemf1f5.SetS3OutputPath(*f5f0iter.TransformJobDefinition.TransformOutput.S3OutputPath)
						}
						f5f0elemf1.SetTransformOutput(f5f0elemf1f5)
					}
					if f5f0iter.TransformJobDefinition.TransformResources != nil {
						f5f0elemf1f6 := &svcsdk.TransformResources{}
						if f5f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f5f0elemf1f6.SetInstanceCount(*f5f0iter.TransformJobDefinition.TransformResources.InstanceCount)
						}
						if f5f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f5f0elemf1f6.SetInstanceType(*f5f0iter.TransformJobDefinition.TransformResources.InstanceType)
						}
						if f5f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID != nil {
							f5f0elemf1f6.SetVolumeKmsKeyId(*f5f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID)
						}
						f5f0elemf1.SetTransformResources(f5f0elemf1f6)
					}
					f5f0elem.SetTransformJobDefinition(f5f0elemf1)
				}
				f5f0 = append(f5f0, f5f0elem)
			}
			f5.SetValidationProfiles(f5f0)
		}
		if r.ko.Spec.ValidationSpecification.ValidationRole != nil {
			f5.SetValidationRole(*r.ko.Spec.ValidationSpecification.ValidationRole)
		}
		res.SetValidationSpecification(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteModelPackageWithContext(ctx, input)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteModelPackageInput, error) {
	res := &svcsdk.DeleteModelPackageInput{}

	if r.ko.Spec.ModelPackageName != nil {
		res.SetModelPackageName(*r.ko.Spec.ModelPackageName)
	}

	return res, nil
}
