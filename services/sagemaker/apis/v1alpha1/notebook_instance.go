// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NotebookInstanceSpec defines the desired state of NotebookInstance
type NotebookInstanceSpec struct {
	AcceleratorTypes           []*string `json:"acceleratorTypes,omitempty"`
	AdditionalCodeRepositories []*string `json:"additionalCodeRepositories,omitempty"`
	DefaultCodeRepository      *string   `json:"defaultCodeRepository,omitempty"`
	DirectInternetAccess       *string   `json:"directInternetAccess,omitempty"`
	InstanceType               *string   `json:"instanceType,omitempty"`
	KMSKeyID                   *string   `json:"kmsKeyID,omitempty"`
	LifecycleConfigName        *string   `json:"lifecycleConfigName,omitempty"`
	NotebookInstanceName       *string   `json:"notebookInstanceName,omitempty"`
	RoleARN                    *string   `json:"roleARN,omitempty"`
	RootAccess                 *string   `json:"rootAccess,omitempty"`
	SecurityGroupIDs           []*string `json:"securityGroupIDs,omitempty"`
	SubnetID                   *string   `json:"subnetID,omitempty"`
	Tags                       []*Tag    `json:"tags,omitempty"`
	VolumeSizeInGB             *int64    `json:"volumeSizeInGB,omitempty"`
}

// NotebookInstanceStatus defines the observed state of NotebookInstance
type NotebookInstanceStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// NotebookInstance is the Schema for the NotebookInstances API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type NotebookInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotebookInstanceSpec   `json:"spec,omitempty"`
	Status            NotebookInstanceStatus `json:"status,omitempty"`
}

// NotebookInstanceList contains a list of NotebookInstance
// +kubebuilder:object:root=true
type NotebookInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotebookInstance `json:"items"`
}

func init() {
	SchemeBuilder.Register(&NotebookInstance{}, &NotebookInstanceList{})
}
